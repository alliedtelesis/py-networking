Device Class
************
Constructor
-----------

*Device(host, username='manager', password='friend', protocol='ssh', port='auto', os='auto', log_level='NOTSET', log_output='console:', connection_timeout=20)*

**Description**
    Create a device object that represent the physical networking device.

**Parameters**:

    - *host*: string
        The host or ip address of the device.

    - *username*: string
        The username of the device user with enough privileges to interact with the device. Usually is the superuser.

    - *protocol*: string
        The protocol used to interact with the device. Currently only ssh is supported.

    - *port*: string
        The tcp or udp port where the device object will connect to with the protocol of choice. Setting 'auto' will
        select the default port of the protocol so for ssh will be 22.

    - *os*: string
        The operating system used by the device. Setting 'auto' will leave to the Device to detect the os.

        The currently supported os are:

        - awp: Allied Telesis switches with AlliedWare Plus

        - ats: Allied Telesis AT-8000S/xx switches

    - *log_level*: string
        The level of logging generated by the Device object. By default no logging is generated.

        The supported log levels with increasing verbosity are: NOTSET (disable logging and default), CRITICAL, WARN, INFO, DEBUG.

     - *log_output*: string
        Where logging is sent. By default the logging is sent to the standard output of the process but it can be saved on
        a file. In this case the prefix the relative path and the file name with the prefix 'file://'.

      - *connection_timeout*: int
        In case of connection oriented protocols, like telnet or ssh, the Device will connect to the physical device when
        commands need to be issued and will tear it down after a number of seconds expressed by this parameters are passed.

**Return**
    a device object if creator succeed

**Example**
    This example instantiates a device object with ssh service enabled at address 192.168.1.10. The os is auto detected and
    username/password are the default manager/friend. The log level verbosity is increased to INFO and log is shown on the
    standard output. The object does not connect to the physical device until open method is executed.::

        form pynetworking import Device

        dev = Device('192.168.1.10', log_level='INFO')

Methods
-------
close
"""""
**close()**

**Description**:
    Tear down the connection with the physical device and free up all the associated resources

**Parameters**:
    None

**Return**
    None

cmd
""""
**cmd(cmds)**

**Description**:
    Issue native commands to the device

**Parameters**:
    - *cmds*: string or dictionary

**Return**
    The output of the command(s)

open
""""
**open()**

**Description**:
    Open the connection with the physical device and loads the facts and features applicable to it.

**Parameters**:
    None

**Return**
    None

**Example**
    This example open a connection with the device and prints its facts::

        form pynetworking import Device
        from pprint import pprint

        dev = Device('192.168.1.10', log_level='INFO', log_output='file://192_168_1_10.log')
        dev.open()
        pprint(dev.facts)
        dev.close()

    an example output is::

        {'boot version': u'1.0.1.07',
         'hardware_rev': u'00.01.00',
         'model': u'AT-8000S/24',
         'os': 'ats',
         'serial_number': 'not found',
         'unit_number': u'1',
         'version': u'3.0.0.44'}

ping
""""
**ping()**

**Description**:
    Verify that the device is alive and is able to respond to command.

**Parameters**:
    None

**Return**
    boolean
        True means that the device is alive and False otherwise.

**Example**
    This example open a connection with the device and prints its facts::

        form pynetworking import Device

        dev = Device('192.168.1.10')
        dev.open()
        if dev.ping():
            print "Device is alive"
        dev.close()

    an example output is::

        Device is alive

Properties
----------
config
""""""
**Description**:
    Return the configuration of the Device in native cli syntax.

**Type**: *Readonly*

**Return**
    string

facts
"""""
**Description**:
    Return a dictionary with Device facts.

**Type**: *Readonly*

**Return**
    dictionary

host
""""
**Description**:
    The hostname of ip address as previously set creating the object.

**Type**: *Readonly*

**Return**
    string

log_level
"""""""""
**Description**:
    The supported log levels with increasing verbosity are: NOTSET (disable logging and default), CRITICAL, WARN, INFO, DEBUG.

**Type**: *ReadWrite*

**Return**
    string

password
""""""""
**Description**:
    The password previously set creating the object.

**Type**: *Readonly*

**Return**
    string

username
""""""""
**Description**:
    The username as previously set creating the object.

**Type**: *Readonly*

**Return**
    string
